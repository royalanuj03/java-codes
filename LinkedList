import java.util.*;
public class AJ
{
    public static class Node
    {
        int data;
        Node next;
    }
    public static class LinkedList
    {
        Node head;
        Node tail;
        int size;

        public void addLast(int val)
        {
            Node temp = new Node();
            temp.data = val;
            temp.next = null;
            if(size==0)
            {
               head = tail = temp;
            }
            else 
            {
                tail.next = temp;
                tail = temp;
            }
            size++;
        }
        public int size()
        {
            return size;
        }
        public void display()
        {
            Node temp = head;
            while(temp!=null)
            {
                System.out.print(temp.data+" ");
                temp = temp.next;
            }
            System.out.println();
        }
        public void removeFirst()
        {
            if(size==0)
            {
                System.out.println("List is Empty");
            }
            else if(size==1)
            {
                head = tail = null;
                size = 0;
            }
            else 
            {
                head = head.next;
                size--;
            }
        }
        public int getFirst()
        {
            if(size==0)
            {
                System.out.println("List is Empty");
                return-1;
            }
            else 
            {
                return head.data;
            }
        }
        public int getLast()
        {
            if(size==0)
            {
                System.out.println("List is Empty");
                return-1; 
            }
            else 
            {
                return tail.data;
            }
        }
        public int getAt(int idx)
        {
            if(size==0)
            {
                System.out.println("List is Empty");
                return-1; 
            }
            else if(idx<0||idx>=size)
            {
                System.out.println("Invalid Argument");
                return -1;
            }
            else 
            {
                Node temp = head;
                for(int i=0;i<idx;i++)
                {
                    temp = temp.next;
                }
                return temp.data;
            }
        }
        public void addFirst(int val)
        {
            Node temp = new Node();
            temp.data = val;
            if(size==0)
            {
                temp.next = null;
                head = tail = temp;
            }
            else 
            {
                temp.next = head;
                head = temp;
            }
            size++;
        }
        public int addAt(int idx,int val)
        {
            if(idx==0)
            {
              addFirst(val);
            }
            else if(idx==size)
            {
               addLast(val);
            }
            else if(idx<0||idx>size)
            {
               System.out.println("Invalid Argument");
            }
            else 
            {
                Node node = new Node();
                node.data = val;
    
                Node temp = head;
                for(int i=0;i<idx-1;i++)
                {
                    temp = temp.next;
                }
                node.next = temp.next;
                temp.next = node;
            }
        }
        public void removeLast()
        {
            if(size==0)
            {
                System.out.println("List is Empty");
            }
            else if(size==1)
            {
                head = tail = null;
                size=0;
            }
            else
            {
                Node temp = head;
                for(int i=0;i<size-2;i++)
                {
                    temp = temp.next;
                }
                tail = temp;
                tail.next = null;
                size--;
            }
        }
    }
    public static void main(String[] args)
    {
      Scanner scn = new Scanner(System.in);
      LinkedList list = new LinkedList();
      int idx = scn.nextInt();
      list.addLast(10);
      list.addLast(20);
      list.addLast(30);
      list.addLast(40);
      System.out.println(list.getFirst());
      System.out.println(list.getLast());
      System.out.println(list.getAt(idx));
      
      //list.removeFirst();
      list.addFirst(200);
      list.display();
      System.out.println(list.size());

    }
}
